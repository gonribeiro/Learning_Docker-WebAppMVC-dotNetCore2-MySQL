// <auto-generated />
using System;
using BokuNoHeroAcademia.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BokuNoHeroAcademia.Migrations
{
    [DbContext(typeof(AcademiaContext))]
    partial class AcademiaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BokuNoHeroAcademia.Models.Curso", b =>
                {
                    b.Property<int>("CursoID")
                        .HasColumnType("int");

                    b.Property<int>("Creditos")
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoID")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("CursoID");

                    b.HasIndex("DepartamentoID");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("BokuNoHeroAcademia.Models.CursoAtribuido", b =>
                {
                    b.Property<int>("CursoID")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorID")
                        .HasColumnType("int");

                    b.HasKey("CursoID", "ProfessorID");

                    b.HasIndex("ProfessorID");

                    b.ToTable("CursoAtribuido");
                });

            modelBuilder.Entity("BokuNoHeroAcademia.Models.Departamento", b =>
                {
                    b.Property<int>("DepartamentoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("ProfessorID")
                        .HasColumnType("int");

                    b.HasKey("DepartamentoID");

                    b.HasIndex("ProfessorID");

                    b.ToTable("Departamento");
                });

            modelBuilder.Entity("BokuNoHeroAcademia.Models.Inscricao", b =>
                {
                    b.Property<int>("InscricaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<int>("EstudanteId")
                        .HasColumnType("int");

                    b.Property<int?>("Nota")
                        .HasColumnType("int");

                    b.HasKey("InscricaoId");

                    b.HasIndex("CursoId");

                    b.HasIndex("EstudanteId");

                    b.ToTable("Inscricao");
                });

            modelBuilder.Entity("BokuNoHeroAcademia.Models.Pessoa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NomeHeroi")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Pessoa");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pessoa");
                });

            modelBuilder.Entity("BokuNoHeroAcademia.Models.Estudante", b =>
                {
                    b.HasBaseType("BokuNoHeroAcademia.Models.Pessoa");

                    b.Property<DateTime>("DataMatricula")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Estudante");
                });

            modelBuilder.Entity("BokuNoHeroAcademia.Models.Professor", b =>
                {
                    b.HasBaseType("BokuNoHeroAcademia.Models.Pessoa");

                    b.Property<DateTime>("DataContratacao")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("BokuNoHeroAcademia.Models.Curso", b =>
                {
                    b.HasOne("BokuNoHeroAcademia.Models.Departamento", "Departamento")
                        .WithMany("Cursos")
                        .HasForeignKey("DepartamentoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BokuNoHeroAcademia.Models.CursoAtribuido", b =>
                {
                    b.HasOne("BokuNoHeroAcademia.Models.Curso", "Curso")
                        .WithMany("CursosAtribuidos")
                        .HasForeignKey("CursoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BokuNoHeroAcademia.Models.Professor", "Professor")
                        .WithMany("CursosAtribuidos")
                        .HasForeignKey("ProfessorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BokuNoHeroAcademia.Models.Departamento", b =>
                {
                    b.HasOne("BokuNoHeroAcademia.Models.Professor", "Coordenador")
                        .WithMany()
                        .HasForeignKey("ProfessorID");
                });

            modelBuilder.Entity("BokuNoHeroAcademia.Models.Inscricao", b =>
                {
                    b.HasOne("BokuNoHeroAcademia.Models.Curso", "Curso")
                        .WithMany("Inscricoes")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BokuNoHeroAcademia.Models.Estudante", "Estudante")
                        .WithMany("Inscricoes")
                        .HasForeignKey("EstudanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
